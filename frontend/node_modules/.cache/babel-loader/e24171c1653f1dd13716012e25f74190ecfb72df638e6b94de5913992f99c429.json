{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeeva\\\\Desktop\\\\campus-chatbot\\\\frontend\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const userId = \"user1\"; // In production, generate unique IDs per user/session\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Add user message to chat\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: input\n    }]);\n    const messageToSend = input;\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          message: messageToSend\n        })\n      });\n      const data = await response.json();\n\n      // Add bot response to chat\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"Sorry, the server is not responding.\"\n      }]);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"350px\",\n      height: \"450px\",\n      backgroundColor: \"#f9f9f9\",\n      borderRadius: \"10px\",\n      boxShadow: \"0 4px 12px rgba(0,0,0,0.2)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      overflow: \"hidden\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: \"10px\",\n        overflowY: \"auto\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n          marginBottom: \"8px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: msg.sender === \"user\" ? \"#4f46e5\" : \"#e5e5ea\",\n            color: msg.sender === \"user\" ? \"white\" : \"black\",\n            padding: \"8px 12px\",\n            borderRadius: \"15px\",\n            maxWidth: \"80%\",\n            wordBreak: \"break-word\"\n          },\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        borderTop: \"1px solid #ddd\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        style: {\n          flex: 1,\n          border: \"none\",\n          padding: \"10px\",\n          fontSize: \"14px\",\n          outline: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        style: {\n          backgroundColor: \"#4f46e5\",\n          color: \"white\",\n          border: \"none\",\n          padding: \"0 15px\",\n          cursor: \"pointer\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","input","setInput","userId","sendMessage","trim","prev","sender","text","messageToSend","response","fetch","method","headers","body","JSON","stringify","user_id","message","data","json","error","console","handleKeyPress","e","key","style","width","height","backgroundColor","borderRadius","boxShadow","display","flexDirection","overflow","fontFamily","children","flex","padding","overflowY","map","msg","index","justifyContent","marginBottom","color","maxWidth","wordBreak","fileName","_jsxFileName","lineNumber","columnNumber","borderTop","type","placeholder","value","onChange","target","onKeyPress","border","fontSize","outline","onClick","cursor","_c","$RefreshReg$"],"sources":["C:/Users/jeeva/Desktop/campus-chatbot/frontend/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function ChatBox() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const userId = \"user1\"; // In production, generate unique IDs per user/session\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    // Add user message to chat\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: input }]);\r\n    const messageToSend = input;\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:8000/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ user_id: userId, message: messageToSend }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      // Add bot response to chat\r\n      setMessages((prev) => [...prev, { sender: \"bot\", text: data.response }]);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"Sorry, the server is not responding.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width: \"350px\",\r\n      height: \"450px\",\r\n      backgroundColor: \"#f9f9f9\",\r\n      borderRadius: \"10px\",\r\n      boxShadow: \"0 4px 12px rgba(0,0,0,0.2)\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      overflow: \"hidden\",\r\n      fontFamily: \"Arial, sans-serif\"\r\n    }}>\r\n      {/* Chat Messages */}\r\n      <div style={{\r\n        flex: 1,\r\n        padding: \"10px\",\r\n        overflowY: \"auto\"\r\n      }}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\r\n              marginBottom: \"8px\"\r\n            }}\r\n          >\r\n            <div style={{\r\n              backgroundColor: msg.sender === \"user\" ? \"#4f46e5\" : \"#e5e5ea\",\r\n              color: msg.sender === \"user\" ? \"white\" : \"black\",\r\n              padding: \"8px 12px\",\r\n              borderRadius: \"15px\",\r\n              maxWidth: \"80%\",\r\n              wordBreak: \"break-word\"\r\n            }}>\r\n              {msg.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input Box */}\r\n      <div style={{ display: \"flex\", borderTop: \"1px solid #ddd\" }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          style={{\r\n            flex: 1,\r\n            border: \"none\",\r\n            padding: \"10px\",\r\n            fontSize: \"14px\",\r\n            outline: \"none\"\r\n          }}\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          style={{\r\n            backgroundColor: \"#4f46e5\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            padding: \"0 15px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,MAAM,GAAG,OAAO,CAAC,CAAC;;EAExB,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACH,KAAK,CAACI,IAAI,CAAC,CAAC,EAAE;;IAEnB;IACAL,WAAW,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEP;IAAM,CAAC,CAAC,CAAC;IACjE,MAAMQ,aAAa,GAAGR,KAAK;IAC3BC,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEd,MAAM;UAAEe,OAAO,EAAET;QAAc,CAAC;MAClE,CAAC,CAAC;MAEF,MAAMU,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;;MAElC;MACApB,WAAW,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEW,IAAI,CAACT;MAAS,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CrB,WAAW,CAAEM,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAuC,CAAC,CAChE,CAAC;IACJ;EACF,CAAC;EAED,MAAMe,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACrBrB,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,oBACER,OAAA;IAAK8B,KAAK,EAAE;MACVC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,OAAO;MACfC,eAAe,EAAE,SAAS;MAC1BC,YAAY,EAAE,MAAM;MACpBC,SAAS,EAAE,4BAA4B;MACvCC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE;IACd,CAAE;IAAAC,QAAA,gBAEAxC,OAAA;MAAK8B,KAAK,EAAE;QACVW,IAAI,EAAE,CAAC;QACPC,OAAO,EAAE,MAAM;QACfC,SAAS,EAAE;MACb,CAAE;MAAAH,QAAA,EACCrC,QAAQ,CAACyC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB9C,OAAA;QAEE8B,KAAK,EAAE;UACLM,OAAO,EAAE,MAAM;UACfW,cAAc,EAAEF,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,UAAU,GAAG,YAAY;UACjEqC,YAAY,EAAE;QAChB,CAAE;QAAAR,QAAA,eAEFxC,OAAA;UAAK8B,KAAK,EAAE;YACVG,eAAe,EAAEY,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;YAC9DsC,KAAK,EAAEJ,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO;YAChD+B,OAAO,EAAE,UAAU;YACnBR,YAAY,EAAE,MAAM;YACpBgB,QAAQ,EAAE,KAAK;YACfC,SAAS,EAAE;UACb,CAAE;UAAAX,QAAA,EACCK,GAAG,CAACjC;QAAI;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC,GAhBDT,KAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGNvD,OAAA;MAAK8B,KAAK,EAAE;QAAEM,OAAO,EAAE,MAAM;QAAEoB,SAAS,EAAE;MAAiB,CAAE;MAAAhB,QAAA,gBAC3DxC,OAAA;QACEyD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAEtD,KAAM;QACbuD,QAAQ,EAAGhC,CAAC,IAAKtB,QAAQ,CAACsB,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QAC1CG,UAAU,EAAEnC,cAAe;QAC3BG,KAAK,EAAE;UACLW,IAAI,EAAE,CAAC;UACPsB,MAAM,EAAE,MAAM;UACdrB,OAAO,EAAE,MAAM;UACfsB,QAAQ,EAAE,MAAM;UAChBC,OAAO,EAAE;QACX;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFvD,OAAA;QACEkE,OAAO,EAAE1D,WAAY;QACrBsB,KAAK,EAAE;UACLG,eAAe,EAAE,SAAS;UAC1BgB,KAAK,EAAE,OAAO;UACdc,MAAM,EAAE,MAAM;UACdrB,OAAO,EAAE,QAAQ;UACjByB,MAAM,EAAE;QACV,CAAE;QAAA3B,QAAA,EACH;MAED;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrD,EAAA,CAlHuBD,OAAO;AAAAmE,EAAA,GAAPnE,OAAO;AAAA,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}